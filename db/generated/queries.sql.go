// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package generated

import (
	"context"
)

const addItemToCart = `-- name: AddItemToCart :exec
insert into public.items (name, cart_id) values ($1, $2)
`

type AddItemToCartParams struct {
	Name   string
	CartID int32
}

func (q *Queries) AddItemToCart(ctx context.Context, arg AddItemToCartParams) error {
	_, err := q.db.ExecContext(ctx, addItemToCart, arg.Name, arg.CartID)
	return err
}

const getCartDetails = `-- name: GetCartDetails :one
select id, name from public.carts
`

func (q *Queries) GetCartDetails(ctx context.Context) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartDetails)
	var i Cart
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCartIdGivenName = `-- name: GetCartIdGivenName :one
select id from public.carts where name = $1
`

func (q *Queries) GetCartIdGivenName(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCartIdGivenName, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getItemsInCart = `-- name: GetItemsInCart :many
select it.id, it.name from public.items it
inner join public.carts c
  on it.cart_id = c.id
where it.cart_id = $1
`

type GetItemsInCartRow struct {
	ID   int32
	Name string
}

func (q *Queries) GetItemsInCart(ctx context.Context, cartID int32) ([]GetItemsInCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getItemsInCart, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemsInCartRow
	for rows.Next() {
		var i GetItemsInCartRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
