// Code generated by MockGen. DO NOT EDIT.
// Source: signoz-test/interfaces (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "signoz-test/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddItemToCart mocks base method.
func (m *MockService) AddItemToCart(arg0 context.Context, arg1 dto.AddToCart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToCart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItemToCart indicates an expected call of AddItemToCart.
func (mr *MockServiceMockRecorder) AddItemToCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToCart", reflect.TypeOf((*MockService)(nil).AddItemToCart), arg0, arg1)
}

// GetItemsInCart mocks base method.
func (m *MockService) GetItemsInCart(arg0 context.Context, arg1 string) (*dto.ItemsInCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsInCart", arg0, arg1)
	ret0, _ := ret[0].(*dto.ItemsInCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsInCart indicates an expected call of GetItemsInCart.
func (mr *MockServiceMockRecorder) GetItemsInCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsInCart", reflect.TypeOf((*MockService)(nil).GetItemsInCart), arg0, arg1)
}
